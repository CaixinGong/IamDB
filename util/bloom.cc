// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "branchdb/filter_policy.h"

#include "branchdb/slice.h"
#include "util/hash.h"

namespace branchdb {

namespace { //匿名命名空间, 只在文件内部可见
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilterPolicy : public FilterPolicy {
 private:
  size_t bits_per_key_; //即数学之美23章中的m/n(即一个key将要分配多少个bit)
  size_t k_;            //即数学之美23章中的k(即一个key将要设置多少个bit为1)即 # of probes,探针的个数

 public:
  explicit BloomFilterPolicy(int bits_per_key) //参数设为10大约为1%的假阳性
      : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  virtual const char* Name() const {
    return "branchdb.BuiltinBloomFilter";
  }

  //根据keys[n]生成filter append 到*dst的尾部
  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;

    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter(最后一个字节:探针的个数)
    char* array = &(*dst)[init_size];
    for (size_t i = 0; i < n; i++) {//对n个key分别处理
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].(即论文Less Hashing, Same Performance: Building a Better Bloom Filter)
      uint32_t h = BloomHash(keys[i]);
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) { //写k_个1
        const uint32_t bitpos = h % bits;
        array[bitpos/8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }

  //bloom_filter记录的是生成的filter, 若key根据filter判断在集合中则返回true，否则返回false
  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;  //一定存储在一个探针的个数, 一个字节

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8; //减一的原因： 因为包含探针个数,一个字节

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len-1];
    if (k > 30) {//不会出现，看下面注释
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos/8] & (1 << (bitpos % 8))) == 0) return false; //k个探针中存在一个0,即不存在
      h += delta;
    }
    return true;
  }
};
}
//该文件内部只有这么一个接口
//参数设为10, 其中探针个数设为10*ln2向下取整，即为6，一般为1%的假阳性
// 这里写的bloom过滤器对key的hash映射，是完整的 key(如包括首尾的空格等
// 若如用户的comparator中的比较运算（如==）是针对key的一部分,则需修改这里的bloom过滤器对映射的key做同样的处理
const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace branchdb
